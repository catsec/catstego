
----- catstego.c -----
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <openssl/evp.h>
#include <openssl/rand.h>
#include <argon2.h>
#include <jpeglib.h>
#include "encryption.h"
#include "fileio.h"
#include "stego.h"



#define HEADER_SIZE (4 + 16 + 16)  // 4-byte payload bit-length, IV, and salt

/* Function to print usage information */
void print_usage(const char *progname) {
    fprintf(stderr, "Usage:\n");
    fprintf(stderr, "  Encode mode:\n");
    fprintf(stderr, "    %s -e|--encode -i|--input <cover.jpg> -t|--text <secret text or secret file> -p|--password <password> -o|--output <new_cover.jpg> [--delete|-D]\n", progname);
    fprintf(stderr, "  Decode mode:\n");
    fprintf(stderr, "    %s -d|--decode -i|--input <stego.jpg> -p|--password <password> [-o|--output <output file>]\n", progname);
}

/* Forward declarations */
int encode_mode(const char *cover_path, const char *secret_arg, const char *password, const char *output_path, int delete_flag);
int decode_mode(const char *stego_path, const char *password, const char *output_path);

int main(int argc, char **argv) {
    if (argc < 2) {
        print_usage(argv[0]);
        return 1;
    }
    int encode = 0, decode = 0, delete_flag = 0;
    const char *input = NULL, *text = NULL, *password = NULL, *output = NULL;

    /* Parse command-line arguments */
    for (int i = 1; i < argc; i++) {
        if ((strcmp(argv[i], "-e") == 0) || (strcmp(argv[i], "--encode") == 0))
            encode = 1;
        else if ((strcmp(argv[i], "-d") == 0) || (strcmp(argv[i], "--decode") == 0))
            decode = 1;
        else if ((strcmp(argv[i], "-i") == 0) || (strcmp(argv[i], "--input") == 0)) {
            if (++i < argc) input = argv[i];
            else { fprintf(stderr, "Error: --input requires a value.\n"); return 1; }
        } else if ((strcmp(argv[i], "-t") == 0) || (strcmp(argv[i], "--text") == 0)) {
            if (++i < argc) text = argv[i];
            else { fprintf(stderr, "Error: --text requires a value.\n"); return 1; }
        } else if ((strcmp(argv[i], "-p") == 0) || (strcmp(argv[i], "--password") == 0)) {
            if (++i < argc) password = argv[i];
            else { fprintf(stderr, "Error: --password requires a value.\n"); return 1; }
        } else if ((strcmp(argv[i], "-o") == 0) || (strcmp(argv[i], "--output") == 0)) {
            if (++i < argc) output = argv[i];
            else { fprintf(stderr, "Error: --output requires a value.\n"); return 1; }
        } else if ((strcmp(argv[i], "--delete") == 0) || (strcmp(argv[i], "-D") == 0))
            delete_flag = 1;
        else {
            fprintf(stderr, "Unknown argument: %s\n", argv[i]);
            print_usage(argv[0]);
            return 1;
        }
    }

    if (encode && decode) {
        fprintf(stderr, "Error: Specify either encode or decode mode, not both.\n");
        return 1;
    }

    if (encode) {
        if (!input || !text || !password || !output) {
            fprintf(stderr, "Error: Encode mode requires --input, --text, --password, and --output.\n");
            print_usage(argv[0]);
            return 1;
        }
        return encode_mode(input, text, password, output, delete_flag);
    } else if (decode) {
        if (!input || !password) {
            fprintf(stderr, "Error: Decode mode requires --input and --password.\n");
            print_usage(argv[0]);
            return 1;
        }
        return decode_mode(input, password, output);
    } else {
        fprintf(stderr, "Error: Must specify either encode (-e) or decode (-d) mode.\n");
        print_usage(argv[0]);
        return 1;
    }
}

/* encode_mode:
 * - Reads the cover JPEG.
 * - Determines if secret_arg is a file or literal text.
 * - Encrypts the payload (with a header that includes ciphertext bit-length, IV, and salt).
 * - Embeds the payload into the JPEG.
 * - Optionally deletes the original cover image.
 */
int encode_mode(const char *cover_path, const char *secret_arg, const char *password, const char *output_path, int delete_flag) {
    int ret = 0;
    uint8_t *secret_data = NULL;
    long secret_len = 0;
    char *payload_string = NULL;
    int payload_string_len = 0;

    if (file_exists(secret_arg)) {
        if (read_file(secret_arg, &secret_data, &secret_len) != 0) {
            fprintf(stderr, "Error: Failed to read secret file '%s'.\n", secret_arg);
            return -1;
        }
        const char *filename = strrchr(secret_arg, '/');
        if (!filename) filename = secret_arg; else filename++;
        payload_string_len = strlen(filename) + 1 + secret_len;
        payload_string = malloc(payload_string_len + 1);
        if (!payload_string) { free(secret_data); return -1; }
        snprintf(payload_string, payload_string_len + 1, "%s/", filename);
        memcpy(payload_string + strlen(filename) + 1, secret_data, secret_len);
        free(secret_data);
    } else {
        payload_string_len = 1 + strlen(secret_arg);
        payload_string = malloc(payload_string_len + 1);
        if (!payload_string) return -1;
        snprintf(payload_string, payload_string_len + 1, "/%s", secret_arg);
    }

    /* Encrypt the payload.
     * Generate random salt and IV.
     */
    uint8_t salt[SALT_LEN], iv[IV_LEN];
    if (RAND_bytes(salt, SALT_LEN) != 1 || RAND_bytes(iv, IV_LEN) != 1) {
        fprintf(stderr, "Error: Failed to generate random salt/IV.\n");
        free(payload_string);
        return -1;
    }

    uint8_t key[KEY_LEN];
    if (derive_key(password, salt, key) != 0) {
        fprintf(stderr, "Error: Key derivation failed.\n");
        free(payload_string);
        return -1;
    }

    uint8_t *encrypted = NULL;
    int encrypted_len = 0;
    if (encrypt_data((uint8_t *)payload_string, payload_string_len, key, iv, &encrypted, &encrypted_len) != 0) {
        fprintf(stderr, "Error: Encryption failed.\n");
        free(payload_string);
        return -1;
    }
    free(payload_string);

    /* Call the new embed function:
       Pass the encrypted payload (ciphertext), its length, plus the IV and salt.
    */
    ret = embed_stego_payload_in_jpeg(cover_path, encrypted, encrypted_len, iv, salt, output_path);
    free(encrypted);
    if (ret != 0) {
        fprintf(stderr, "Error: Failed to embed stego payload into JPEG.\n");
        return -1;
    }

    printf("Data encoded successfully into '%s'.\n", output_path);
    if (delete_flag) {
        if (remove(cover_path) == 0)
            printf("Original cover image '%s' deleted.\n", cover_path);
        else
            fprintf(stderr, "Warning: Failed to delete original cover image '%s'.\n", cover_path);
    }
    return 0;
}

/* decode_mode:
 * - Reads the stego JPEG.
 * - Extracts the payload from the DCT coefficients.
 * - Parses the header to retrieve ciphertext bit-length, IV, and salt.
 * - Derives the key and decrypts the payload.
 * - If the payload starts with '/', it is treated as text; otherwise, it's assumed to include a filename.
 */
int decode_mode(const char *stego_path, const char *password, const char *output_path) {
    uint8_t *stego_payload = NULL;
    int stego_payload_len = 0;
    if (extract_stego_payload_from_jpeg(stego_path, &stego_payload, &stego_payload_len) != 0) {
        fprintf(stderr, "Error: Failed to extract stego payload from JPEG '%s'.\n", stego_path);
        return -1;
    }
    if (stego_payload_len < HEADER_SIZE) {
        fprintf(stderr, "Error: Stego payload too short.\n");
        free(stego_payload);
        return -1;
    }

    uint32_t payload_bit_length = stego_payload[0] | (stego_payload[1] << 8) | (stego_payload[2] << 16) | (stego_payload[3] << 24);
    int expected_encrypted_len = payload_bit_length / 8;
    uint8_t iv[IV_LEN], salt[SALT_LEN];
    memcpy(iv, stego_payload + 4, IV_LEN);
    memcpy(salt, stego_payload + 4 + IV_LEN, SALT_LEN);
    uint8_t *encrypted = stego_payload + HEADER_SIZE;
    int encrypted_len = stego_payload_len - HEADER_SIZE;
    if (encrypted_len != expected_encrypted_len)
        fprintf(stderr, "Warning: Encrypted payload length (%d bytes) does not match header expectation (%d bytes).\n", encrypted_len, expected_encrypted_len);

    uint8_t key[KEY_LEN];
    if (derive_key(password, salt, key) != 0) {
        fprintf(stderr, "Error: Key derivation failed.\n");
        free(stego_payload);
        return -1;
    }

    uint8_t *decrypted = NULL;
    int decrypted_len = 0;
    if (decrypt_data(encrypted, encrypted_len, key, iv, &decrypted, &decrypted_len) != 0) {
        fprintf(stderr, "Error: Decryption failed.\n");
        free(stego_payload);
        return -1;
    }
    free(stego_payload);

    if (decrypted_len < 1) {
        fprintf(stderr, "Error: Decrypted data is empty.\n");
        free(decrypted);
        return -1;
    }
    if (decrypted[0] == '/') {
        char *secret_text = (char *)decrypted + 1;
        if (output_path) {
            if (write_file(output_path, (uint8_t *)secret_text, decrypted_len - 1) != 0) {
                fprintf(stderr, "Error: Failed to write output file '%s'.\n", output_path);
                free(decrypted);
                return -1;
            }
            printf("Secret text extracted to '%s'.\n", output_path);
        } else {
            printf("Extracted secret text:\n%s\n", secret_text);
        }
    } else {
        char *sep = memchr(decrypted, '/', decrypted_len);
        if (!sep) {
            fprintf(stderr, "Error: Invalid payload format.\n");
            free(decrypted);
            return -1;
        }
        int fname_len = sep - (char *)decrypted;
        char filename[256];
        if (fname_len >= 256) fname_len = 255;
        memcpy(filename, decrypted, fname_len);
        filename[fname_len] = '\0';
        char *secret_data = sep + 1;
        int secret_data_len = decrypted_len - fname_len - 1;
        if (output_path) {
            if (write_file(output_path, (uint8_t *)secret_data, secret_data_len) != 0) {
                fprintf(stderr, "Error: Failed to write output file '%s'.\n", output_path);
                free(decrypted);
                return -1;
            }
            printf("Secret extracted to '%s'.\n", output_path);
        } else {
            if (write_file(filename, (uint8_t *)secret_data, secret_data_len) != 0) {
                fprintf(stderr, "Error: Failed to write output file '%s'.\n", filename);
                free(decrypted);
                return -1;
            }
            printf("Secret extracted to '%s'.\n", filename);
        }
    }
    free(decrypted);
    return 0;
}



----- decode.c -----
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "stego.h"  // This header declares decode_mode()

static void print_usage(const char *progname) {
    fprintf(stderr, "Usage:\n");
    fprintf(stderr, "  %s decode <stego.jpg> <password> [output_file]\n", progname);
}

int main(int argc, char **argv) {
    if (argc < 4) {
        print_usage(argv[0]);
        return 1;
    }

    /* Positional parameters:
       argv[1] should be "decode" (we assume that because this is decode.c)
       argv[2] : stego image path
       argv[3] : password
       argv[4] (optional): output file path
    */
    const char *stego_path = argv[2];
    const char *password = argv[3];
    const char *output_path = (argc > 4) ? argv[4] : NULL;

    int ret = decode_mode(stego_path, password, output_path);
    return ret;
}



----- encode.c -----
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "stego.h"

static void print_usage(const char *progname) {
    fprintf(stderr, "Usage:\n");
    fprintf(stderr, "  %s encode <cover.jpg> <text_or_secret_file> <password> <output.jpg> [--delete|-D]\n", progname);
}

int main(int argc, char **argv) {
    if (argc < 6) {
        print_usage(argv[0]);
        return 1;
    }

    /* Positional parameters:
       argv[1] should be "encode" (we assume that since this is in encode.c)
       argv[2] : cover image path
       argv[3] : secret text (or secret file name)
       argv[4] : password
       argv[5] : output image path
       argv[6] (optional): "--delete" or "-D" flag
    */
    const char *cover_path = argv[2];
    const char *data_arg = argv[3];
    const char *password = argv[4];
    const char *output_path = argv[5];
    int delete_flag = 0;
    if (argc > 6) {
        if ((strcmp(argv[6], "--delete") == 0) || (strcmp(argv[6], "-D") == 0))
            delete_flag = 1;
    }

    int ret = encode_mode(cover_path, data_arg, password, output_path, delete_flag);
    return ret;
}


----- encryption.c -----
#include "encryption.h"
#include <string.h>
#include <stdlib.h>
#include <openssl/evp.h>
#include <openssl/rand.h>
#include <argon2.h>

/* Derive a key using Argon2id. Returns 0 on success. */
int derive_key(const char *password, const uint8_t *salt, uint8_t *key) {
    int ret = argon2_hash(
        ARGON2_T_COST,           /* time cost */
        ARGON2_M_COST,           /* memory cost (KiB) */
        ARGON2_PARALLELISM,      /* parallelism */
        password, strlen(password),
        salt, SALT_LEN,
        key, KEY_LEN,
        NULL, 0,               /* no encoded output */
        Argon2_id, ARGON2_VERSION_13);
    return ret;  /* 0 on success */
}

int encrypt_data(const uint8_t *plaintext, int plaintext_len,
                 const uint8_t *key, const uint8_t *iv,
                 uint8_t **ciphertext, int *ciphertext_len) {
    EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
    if (!ctx) return -1;

    int len = 0, total_len = 0;
    /* Allocate worst-case output buffer */
    *ciphertext = malloc(plaintext_len + EVP_MAX_BLOCK_LENGTH);
    if (!*ciphertext) {
        EVP_CIPHER_CTX_free(ctx);
        return -1;
    }

    if (EVP_EncryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, key, iv) != 1)
        goto err;
    if (EVP_EncryptUpdate(ctx, *ciphertext, &len, plaintext, plaintext_len) != 1)
        goto err;
    total_len = len;
    if (EVP_EncryptFinal_ex(ctx, *ciphertext + len, &len) != 1)
        goto err;
    total_len += len;
    *ciphertext_len = total_len;
    EVP_CIPHER_CTX_free(ctx);
    return 0;
err:
    free(*ciphertext);
    EVP_CIPHER_CTX_free(ctx);
    return -1;
}

int decrypt_data(const uint8_t *ciphertext, int ciphertext_len,
                 const uint8_t *key, const uint8_t *iv,
                 uint8_t **plaintext, int *plaintext_len) {
    EVP_CIPHER_CTX *ctx = EVP_CIPHER_CTX_new();
    if (!ctx) return -1;

    int len = 0, total_len = 0;
    /* Allocate a buffer for plaintext and an extra byte for a null terminator */
    *plaintext = malloc(ciphertext_len + 1);
    if (!*plaintext) {
        EVP_CIPHER_CTX_free(ctx);
        return -1;
    }

    if (EVP_DecryptInit_ex(ctx, EVP_aes_256_cbc(), NULL, key, iv) != 1)
        goto err;
    if (EVP_DecryptUpdate(ctx, *plaintext, &len, ciphertext, ciphertext_len) != 1)
        goto err;
    total_len = len;
    if (EVP_DecryptFinal_ex(ctx, *plaintext + len, &len) != 1)
        goto err;
    total_len += len;
    /* Null-terminate the output so that text can be printed safely.
       (When decrypting a file, your file‑writing code should use decrypted_len.) */
    (*plaintext)[total_len] = '\0';
    *plaintext_len = total_len;
    EVP_CIPHER_CTX_free(ctx);
    return 0;
err:
    free(*plaintext);
    EVP_CIPHER_CTX_free(ctx);
    return -1;
}



----- encryption.h -----
#ifndef ENCRYPTION_H
#define ENCRYPTION_H

#ifndef ARGON2_T_COST
#define ARGON2_T_COST 3
#endif

#ifndef ARGON2_M_COST
#define ARGON2_M_COST 4096  // Memory cost in KiB
#endif

#ifndef ARGON2_PARALLELISM
#define ARGON2_PARALLELISM 1
#endif

#include <stdint.h>

/* Constants for key derivation and encryption */
#define SALT_LEN 16
#define IV_LEN 16
#define KEY_LEN 32

/* 
 * derive_key
 * Derives a 256-bit key using Argon2id.
 * Returns 0 on success, nonzero on failure.
 */
int derive_key(const char *password, const uint8_t *salt, uint8_t *key);

/*
 * encrypt_data
 * Encrypts plaintext (of length plaintext_len) using AES-256-CBC with PKCS7 padding.
 * On success, *ciphertext is allocated (caller must free it) and ciphertext_len is set.
 * Returns 0 on success, nonzero on failure.
 */
int encrypt_data(const uint8_t *plaintext, int plaintext_len,
                 const uint8_t *key, const uint8_t *iv,
                 uint8_t **ciphertext, int *ciphertext_len);

/*
 * decrypt_data
 * Decrypts ciphertext (of length ciphertext_len) using AES-256-CBC with PKCS7 padding.
 * On success, *plaintext is allocated (caller must free it) and plaintext_len is set.
 * Returns 0 on success, nonzero on failure.
 */
int decrypt_data(const uint8_t *ciphertext, int ciphertext_len,
                 const uint8_t *key, const uint8_t *iv,
                 uint8_t **plaintext, int *plaintext_len);

#endif  /* ENCRYPTION_H */



----- fileio.c -----
#include "fileio.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int file_exists(const char *path) {
    FILE *f = fopen(path, "rb");
    if (f) {
        fclose(f);
        return 1;
    }
    return 0;
}

int read_file(const char *path, uint8_t **data, long *len) {
    FILE *f = fopen(path, "rb");
    if (!f) return -1;
    if (fseek(f, 0, SEEK_END) != 0) { fclose(f); return -1; }
    long size = ftell(f);
    if (size < 0) { fclose(f); return -1; }
    rewind(f);
    *data = malloc(size);
    if (!*data) { fclose(f); return -1; }
    if (fread(*data, 1, size, f) != (size_t)size) { 
        free(*data); 
        fclose(f); 
        return -1; 
    }
    fclose(f);
    *len = size;
    return 0;
}

int write_file(const char *path, const uint8_t *data, long len) {
    FILE *f = fopen(path, "wb");
    if (!f) return -1;
    if (fwrite(data, 1, len, f) != (size_t)len) { 
        fclose(f); 
        return -1; 
    }
    fclose(f);
    return 0;
}



----- fileio.h -----
#ifndef FILEIO_H
#define FILEIO_H

#include <stdint.h>

/*
 * file_exists
 * Returns 1 if file exists, 0 otherwise.
 */
int file_exists(const char *path);

/*
 * read_file
 * Reads entire file at path into a dynamically allocated buffer.
 * On success, *data is allocated (caller must free) and *len is set.
 * Returns 0 on success, nonzero on failure.
 */
int read_file(const char *path, uint8_t **data, long *len);

/*
 * write_file
 * Writes data (of length len) to file at path.
 * Returns 0 on success, nonzero on failure.
 */
int write_file(const char *path, const uint8_t *data, long len);

#endif  /* FILEIO_H */



----- stego.c -----
#include "stego.h"
#include "fileio.h"
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <jpeglib.h>
#include <jerror.h>
#include <math.h>

#define HEADER_SIZE 36  // 4-byte ciphertext bit-length, 16-byte IV, 16-byte salt

/* Candidate selection: a DCT coefficient is a candidate if (abs(coefficient) & 0x7C) > 0 */
static inline int is_candidate(int coeff) {
    return ((abs(coeff) & 0x7C) > 0);
}

/* embed_bit: embed a single bit into a coefficient by modifying its LSB.
   If the new value does not satisfy the candidate condition, a safe default is used.
*/
int embed_bit(int coeff, int bit) {
    int sign = (coeff < 0) ? -1 : 1;
    int abs_val = abs(coeff);
    int new_abs = (abs_val & ~1) | bit;
    if ((new_abs & 0x7C) == 0) {
        new_abs = (bit == 0 ? 2 : 3);
    }
    return sign * new_abs;
}

/* bytes_to_bits: converts an array of bytes to an array of bits (MSB first) */
void bytes_to_bits(const uint8_t *data, int data_len, uint8_t **bits, int *bits_len) {
    int total = data_len * 8;
    *bits = malloc(total);
    if (!*bits) { 
        *bits_len = 0; 
        return; 
    }
    for (int i = 0; i < data_len; i++) {
        for (int j = 0; j < 8; j++) {
            (*bits)[i * 8 + j] = (data[i] >> (7 - j)) & 1;
        }
    }
    *bits_len = total;
}

/* bits_to_bytes: converts an array of bits (MSB first) back to bytes */
void bits_to_bytes(const uint8_t *bits, int bits_len, uint8_t **data, int *data_len) {
    int len = bits_len / 8;
    *data = malloc(len);
    if (!*data) { 
        *data_len = 0; 
        return; 
    }
    for (int i = 0; i < len; i++) {
        uint8_t byte = 0;
        for (int j = 0; j < 8; j++) {
            byte = (byte << 1) | bits[i * 8 + j];
        }
        (*data)[i] = byte;
    }
    *data_len = len;
}

/* final_candidate_count:
   Starting from candidate_count, decrement until the count is not divisible by 251.
   This ensures that 251 is coprime with the final candidate count.
*/
static int final_candidate_count(int candidate_count) {
    int final_count = candidate_count;
    while (final_count > 0 && (final_count % 251) == 0) {
        final_count--;
    }
    return final_count;
}

/*
 * embed_stego_payload_in_jpeg:
 *   - Builds stego_payload = header || ciphertext, where the header (36 bytes) is:
 *         Bytes 0–3: (ciphertext_len * 8) in little-endian,
 *         Bytes 4–19: IV,
 *         Bytes 20–35: salt.
 *   - Converts the payload to a bit stream.
 *   - Builds a candidate list from all DCT coefficients satisfying is_candidate().
 *   - Computes final_count = final_candidate_count(candidate_count) and checks capacity.
 *   - Embeds each payload bit at candidate index:
 *         pos = (j * 251) mod final_count
 *   - Writes out the modified JPEG.
 */
int embed_stego_payload_in_jpeg(const char *jpeg_in_path,
                                  const uint8_t *ciphertext,
                                  int ciphertext_len,
                                  const uint8_t *iv,
                                  const uint8_t *salt,
                                  const char *jpeg_out_path) {
    int stego_payload_len = HEADER_SIZE + ciphertext_len;
    uint8_t *stego_payload = malloc(stego_payload_len);
    if (!stego_payload) {
        fprintf(stderr, "Error: Unable to allocate stego payload.\n");
        return -1;
    }
    uint32_t payload_bit_length = ciphertext_len * 8;
    stego_payload[0] = payload_bit_length & 0xFF;
    stego_payload[1] = (payload_bit_length >> 8) & 0xFF;
    stego_payload[2] = (payload_bit_length >> 16) & 0xFF;
    stego_payload[3] = (payload_bit_length >> 24) & 0xFF;
    memcpy(stego_payload + 4, iv, 16);
    memcpy(stego_payload + 20, salt, 16);
    memcpy(stego_payload + HEADER_SIZE, ciphertext, ciphertext_len);
    
    uint8_t *payload_bits = NULL;
    int payload_bits_len = 0;
    bytes_to_bits(stego_payload, stego_payload_len, &payload_bits, &payload_bits_len);
    free(stego_payload);
    
    struct jpeg_decompress_struct dinfo;
    struct jpeg_error_mgr jerr;
    uint8_t *jpeg_in_data = NULL;
    long jpeg_in_size = 0;
    int ret = 0;
    
    if (read_file(jpeg_in_path, &jpeg_in_data, &jpeg_in_size) != 0) {
        fprintf(stderr, "Error: Failed to read input JPEG file '%s'.\n", jpeg_in_path);
        free(payload_bits);
        return -1;
    }
    
    dinfo.err = jpeg_std_error(&jerr);
    jpeg_create_decompress(&dinfo);
    jpeg_mem_src(&dinfo, jpeg_in_data, jpeg_in_size);
    if (jpeg_read_header(&dinfo, TRUE) != JPEG_HEADER_OK) {
        fprintf(stderr, "Error: Failed to read JPEG header from '%s'.\n", jpeg_in_path);
        ret = -1;
        jpeg_finish_decompress(&dinfo);
        jpeg_destroy_decompress(&dinfo);
        free(jpeg_in_data);
        free(payload_bits);
        return ret;
    }
    
    jvirt_barray_ptr *coef_arrays = jpeg_read_coefficients(&dinfo);
    if (!coef_arrays) {
        fprintf(stderr, "Error: Could not read coefficient arrays.\n");
        ret = -1;
        jpeg_finish_decompress(&dinfo);
        jpeg_destroy_decompress(&dinfo);
        free(jpeg_in_data);
        free(payload_bits);
        return ret;
    }
    
    int candidate_count = 0;
    for (int comp = 0; comp < dinfo.num_components; comp++) {
        jpeg_component_info *comp_info = &dinfo.comp_info[comp];
        int w = comp_info->width_in_blocks, h = comp_info->height_in_blocks;
        for (int row = 0; row < h; row++) {
            JBLOCKARRAY buffer = (*dinfo.mem->access_virt_barray)
                ((j_common_ptr)&dinfo, coef_arrays[comp], row, 1, TRUE);
            JBLOCKROW row_ptr = buffer[0];
            for (int col = 0; col < w; col++) {
                JCOEF *block = row_ptr[col];
                for (int i = 1; i < DCTSIZE2; i++) {
                    if (is_candidate(block[i]))
                        candidate_count++;
                }
            }
        }
    }
    
    int final_count = final_candidate_count(candidate_count);
    if (final_count < payload_bits_len) {
        fprintf(stderr, "Error: Not enough candidate coefficients (%d) to embed %d bits.\n", final_count, payload_bits_len);
        ret = -1;
        free(payload_bits);
        jpeg_finish_decompress(&dinfo);
        jpeg_destroy_decompress(&dinfo);
        free(jpeg_in_data);
        return ret;
    }
    
    JCOEF **candidates = malloc(candidate_count * sizeof(JCOEF *));
    if (!candidates) {
        ret = -1;
        free(payload_bits);
        jpeg_finish_decompress(&dinfo);
        jpeg_destroy_decompress(&dinfo);
        free(jpeg_in_data);
        return ret;
    }
    int idx = 0;
    for (int comp = 0; comp < dinfo.num_components; comp++) {
        jpeg_component_info *comp_info = &dinfo.comp_info[comp];
        int w = comp_info->width_in_blocks, h = comp_info->height_in_blocks;
        for (int row = 0; row < h; row++) {
            JBLOCKARRAY buffer = (*dinfo.mem->access_virt_barray)
                ((j_common_ptr)&dinfo, coef_arrays[comp], row, 1, TRUE);
            JBLOCKROW row_ptr = buffer[0];
            for (int col = 0; col < w; col++) {
                JCOEF *block = row_ptr[col];
                for (int i = 1; i < DCTSIZE2; i++) {
                    if (is_candidate(block[i]))
                        candidates[idx++] = &block[i];
                }
            }
        }
    }
    if (idx != candidate_count) {
        fprintf(stderr, "Error: Candidate count mismatch: %d vs %d\n", candidate_count, idx);
        ret = -1;
        free(candidates);
        free(payload_bits);
        jpeg_finish_decompress(&dinfo);
        jpeg_destroy_decompress(&dinfo);
        free(jpeg_in_data);
        return ret;
    }
    
    for (int j = 0; j < payload_bits_len; j++) {
        int pos = (j * 251) % final_count;
        *candidates[pos] = embed_bit(*candidates[pos], payload_bits[j]);
    }
    free(payload_bits);
    
    {
        struct jpeg_compress_struct cinfo;
        struct jpeg_error_mgr cjerr;
        cinfo.err = jpeg_std_error(&cjerr);
        jpeg_create_compress(&cinfo);
        unsigned char *outbuffer = NULL;
        unsigned long outsize = 0;
        jpeg_mem_dest(&cinfo, &outbuffer, &outsize);
        jpeg_copy_critical_parameters(&dinfo, &cinfo);
        jpeg_write_coefficients(&cinfo, coef_arrays);
        jpeg_finish_compress(&cinfo);
        jpeg_destroy_compress(&cinfo);
        if (write_file(jpeg_out_path, outbuffer, outsize) != 0) {
            fprintf(stderr, "Error: Failed to write output JPEG file '%s'.\n", jpeg_out_path);
            ret = -1;
        }
        free(outbuffer);
    }
    
    jpeg_finish_decompress(&dinfo);
    jpeg_destroy_decompress(&dinfo);
    free(candidates);
    free(jpeg_in_data);
    return ret;
}

/*
 * extract_stego_payload_from_jpeg:
 *   - Rebuild the candidate list using the same candidate test.
 *   - Compute final_count = final_candidate_count(candidate_count).
 *   - Recover the payload bits by reading:
 *         pos = (j * 251) mod final_count
 *     for j from 0 to total_payload_bits-1.
 *   - First, extract the first 32 bits (4 bytes) to get ciphertext bit-length.
 *   - Then, extract total_payload_bits = (HEADER_SIZE*8 + ciphertext_bit_length) bits.
 *   - Convert the recovered bit stream back to bytes.
 */
int extract_stego_payload_from_jpeg(const char *jpeg_in_path, uint8_t **payload_out, int *payload_out_len) {
    struct jpeg_decompress_struct dinfo;
    struct jpeg_error_mgr jerr;
    uint8_t *jpeg_in_data = NULL;
    long jpeg_in_size = 0;
    int ret = 0;
    
    if (read_file(jpeg_in_path, &jpeg_in_data, &jpeg_in_size) != 0) {
        fprintf(stderr, "Error: Failed to read input JPEG file '%s'.\n", jpeg_in_path);
        return -1;
    }
    
    dinfo.err = jpeg_std_error(&jerr);
    jpeg_create_decompress(&dinfo);
    jpeg_mem_src(&dinfo, jpeg_in_data, jpeg_in_size);
    if (jpeg_read_header(&dinfo, TRUE) != JPEG_HEADER_OK) {
        fprintf(stderr, "Error: Failed to read JPEG header from '%s'.\n", jpeg_in_path);
        ret = -1;
        jpeg_finish_decompress(&dinfo);
        jpeg_destroy_decompress(&dinfo);
        free(jpeg_in_data);
        return ret;
    }
    jvirt_barray_ptr *coef_arrays = jpeg_read_coefficients(&dinfo);
    if (!coef_arrays) {
        fprintf(stderr, "Error: Could not read coefficient arrays.\n");
        ret = -1;
        jpeg_finish_decompress(&dinfo);
        jpeg_destroy_decompress(&dinfo);
        free(jpeg_in_data);
        return ret;
    }
    
    int candidate_count = 0;
    for (int comp = 0; comp < dinfo.num_components; comp++) {
        jpeg_component_info *comp_info = &dinfo.comp_info[comp];
        int w = comp_info->width_in_blocks, h = comp_info->height_in_blocks;
        for (int row = 0; row < h; row++) {
            JBLOCKARRAY buffer = (*dinfo.mem->access_virt_barray)
              ((j_common_ptr)&dinfo, coef_arrays[comp], row, 1, TRUE);
            JBLOCKROW row_ptr = buffer[0];
            for (int col = 0; col < w; col++) {
                JCOEF *block = row_ptr[col];
                for (int i = 1; i < DCTSIZE2; i++) {
                    if (is_candidate(block[i]))
                        candidate_count++;
                }
            }
        }
    }
    
    JCOEF **candidates = malloc(candidate_count * sizeof(JCOEF *));
    if (!candidates) {
        ret = -1;
        jpeg_finish_decompress(&dinfo);
        jpeg_destroy_decompress(&dinfo);
        free(jpeg_in_data);
        return ret;
    }
    int idx = 0;
    for (int comp = 0; comp < dinfo.num_components; comp++) {
        jpeg_component_info *comp_info = &dinfo.comp_info[comp];
        int w = comp_info->width_in_blocks, h = comp_info->height_in_blocks;
        for (int row = 0; row < h; row++) {
            JBLOCKARRAY buffer = (*dinfo.mem->access_virt_barray)
              ((j_common_ptr)&dinfo, coef_arrays[comp], row, 1, TRUE);
            JBLOCKROW row_ptr = buffer[0];
            for (int col = 0; col < w; col++) {
                JCOEF *block = row_ptr[col];
                for (int i = 1; i < DCTSIZE2; i++) {
                    if (is_candidate(block[i]))
                        candidates[idx++] = &block[i];
                }
            }
        }
    }
    if (idx != candidate_count) {
        fprintf(stderr, "Error: Candidate count mismatch in extraction: %d vs %d\n", candidate_count, idx);
        ret = -1;
        free(candidates);
        jpeg_finish_decompress(&dinfo);
        jpeg_destroy_decompress(&dinfo);
        free(jpeg_in_data);
        return ret;
    }
    
    int final_count = final_candidate_count(candidate_count);
    
    int header_bits_extracted = 32;
    uint8_t *header_bits_array = malloc(header_bits_extracted);
    if (!header_bits_array) {
        ret = -1;
        free(candidates);
        jpeg_finish_decompress(&dinfo);
        jpeg_destroy_decompress(&dinfo);
        free(jpeg_in_data);
        return ret;
    }
    for (int j = 0; j < header_bits_extracted; j++) {
        int pos = (j * 251) % final_count;
        header_bits_array[j] = *candidates[pos] & 1;
    }
    uint8_t *header_bytes = NULL;
    int header_bytes_len = 0;
    bits_to_bytes(header_bits_array, header_bits_extracted, &header_bytes, &header_bytes_len);
    free(header_bits_array);
    if (header_bytes_len != 4) {
        fprintf(stderr, "Error: Header conversion failed. Expected 4 bytes, got %d bytes.\n", header_bytes_len);
        ret = -1;
        free(candidates);
        free(jpeg_in_data);
        free(header_bytes);
        return ret;
    }
    uint32_t payload_bit_length = header_bytes[0] |
        (header_bytes[1] << 8) | (header_bytes[2] << 16) | (header_bytes[3] << 24);
    printf("Extraction Debug: Payload bit length (from header): %u\n", payload_bit_length);
    
    int total_payload_bits = (HEADER_SIZE * 8) + payload_bit_length;
    uint8_t *payload_bits_array = malloc(total_payload_bits);
    if (!payload_bits_array) {
        ret = -1;
        free(candidates);
        free(header_bytes);
        jpeg_finish_decompress(&dinfo);
        jpeg_destroy_decompress(&dinfo);
        free(jpeg_in_data);
        return ret;
    }
    for (int j = 0; j < total_payload_bits; j++) {
        int pos = (j * 251) % final_count;
        payload_bits_array[j] = *candidates[pos] & 1;
    }
    uint8_t *full_extracted = NULL;
    int full_extracted_len = 0;
    bits_to_bytes(payload_bits_array, total_payload_bits, &full_extracted, &full_extracted_len);
    free(payload_bits_array);
    
    printf("Extraction Debug: Full extracted payload length: %d bytes\n", full_extracted_len);
    int extracted_ciphertext_len = full_extracted_len - HEADER_SIZE;
    if (extracted_ciphertext_len != (int)(payload_bit_length / 8)) {
        fprintf(stderr, "Warning: Encrypted payload length (%d bytes) does not match header expectation (%d bytes).\n",
                extracted_ciphertext_len, payload_bit_length / 8);
        full_extracted_len = HEADER_SIZE + (payload_bit_length / 8);
    }
    
    *payload_out = full_extracted;
    *payload_out_len = full_extracted_len;
    
    free(candidates);
    free(header_bytes);
    
    jpeg_finish_decompress(&dinfo);
    jpeg_destroy_decompress(&dinfo);
    free(jpeg_in_data);
    return ret;
}



----- stego.h -----
#ifndef STEGO_H
#define STEGO_H

#include <stdint.h>

int embed_stego_payload_in_jpeg(const char *jpeg_in_path,
                                  const uint8_t *ciphertext,
                                  int ciphertext_len,
                                  const uint8_t *iv,      /* 16 bytes */
                                  const uint8_t *salt,    /* 16 bytes */
                                  const char *jpeg_out_path);

int extract_stego_payload_from_jpeg(const char *jpeg_in_path,
                                    uint8_t **payload_out,
                                    int *payload_out_len);

#endif // STEGO_H



